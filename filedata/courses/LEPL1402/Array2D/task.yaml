accessible: true
author: Yakoub J, Rucquoy A
categories:
- module1
context: |-
  In order to better aprehend the concept of multi-dimensionnal array, we ask you to complete the `Matrix` class given next.

  **Note: Except for the `product` function, the matrix are not necesseraly rectangular**

  .. code-block:: java

      public class Matrix {

          /**
           * Create a matrix from a String.
           *
           * The string if formatted as follow:
           *  - Each row of the matrix is separated by a newline
           *    character \n
           *  - Each element of the rows are separated by a space
           *  For example, the String "0 1\n2 3" represent the
           *  matrix:
           *      [0 1]
           *      [2 3]
           *
           *  @param s The input String
           *  @return The matrix represented by the String
           */
          public static int[][] buildFrom(String s) {
              // TODO
              return null;
          }

          /**
           * Compute the sum of the element in a matrix
           *
           * @param matrix The input matrix
           * @return The sum of the element in matrix
           */
          public static int sum(int[][] matrix) {
              // TODO
              return 0;
          }

          /**
           * Compute the transpose of a matrix
           *
           * @param matrix The input rectangular matrix
           * @return A new matrix that is the transpose of matrix
           */
          public static int[][] transpose(int[][] matrix) {
              // TODO
              return null;
          }

          /**
           * Compute the product of two matrix
           *
           * @param matrix1 A n x m matrix
           * @param matrix2 A m x k matrix
           * @return The n x k matrix product of matrix1 and matrix2
           */
          public static int[][] product(int[][] matrix1, int[][] matrix2) {
              // TODO
              return null;
          }
      }
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[Module 1] Arrays 2D and Matrix'
network_grading: false
order: 6
problems:
    build_from:
        default: ''
        header: 'Paste the **body** of the ``buildFrom`` method:'
        name: ''
        language: java
        type: code
    sum:
        type: code
        name: ''
        default: ''
        header: 'Paste the **body** of the ``sum`` method:'
        language: java
    transpose:
        language: java
        header: 'Paste the **body** of the ``transpose`` method:'
        default: ''
        type: code
        name: ''
    product:
        language: java
        name: ''
        type: code
        default: ''
        header: 'Paste the **body** of the ``product`` method:'
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
