accessible: true
author: Bastin J. , Piron H.
categories:
- module6
contact_url: ''
context: |-
    For this task you will learn use Future_ and ExecutorService_ in order to load a web page with images asynchronously. Indeed html is lightweight compared to the images so we want the images to be downloaded asynchronously while the html is displayed without the images.

    In this task we give you the WebPage_ class to complete and three other class to use : URL_, Image_ and HTML_.

    You can download the `IntelliJ Project`_ that contains few tests to help you.

    .. _`IntelliJ Project`: /course/LEPL1402/Future/LEPL1402_Future.zip

    .. code-block:: java

        import java.util.ArrayList;
        import java.util.List;
        import java.util.concurrent.ExecutionException;
        import java.util.concurrent.ExecutorService;
        import java.util.concurrent.Executors;
        import java.util.concurrent.Future;

        public class WebPage {

            private ExecutorService executor;
            private HTML html;

            /*
             * Bound executor to a fixed thread pool size
             */
            public WebPage(int threadNumber, HTML html){
                //TODO
            }

            /*
             * submit the download of the image specified by the url
             * to be executed by thread pool
             */
            public Future<Image> loadImage(URL url){
                //TODO
            }

            /*
             * Download the image specified by the url
             */
            public Image downloadImageFromURL(URL url){
                //HIDDEN
            }

            /*
             * Load all images of the page
             */
            public List<Future<Image>> loadImages(List<URL> urls){
                //TODO
            }

            /*
             * Load the page while images are being downloaded
             */
            private void displayPageWithoutImage(){
                //HIDDEN
            }

            /*
             * Display all images on the page
             */
            private void displayImages(List<Image> images){
                //HIDDEN
            }

            /*
             * load the page
             */
            public void loadPage(){
                // First the image are downloaded asynchronously
                List<Future<Image>> futures = loadImages(this.html.getUrls());
                // While the image are being downloaded, we display the page without them
                displayPageWithoutImage();
                // Then we need all images to display them
                List<Image> images = new ArrayList<Image>(futures.size());
                try{
                    for(Future<Image> future : futures){
                        // the "get()" function is waiting for the result of the future task (here download the images)
                        images.add(future.get());
                    }
                } catch(InterruptedException e){

                } catch (ExecutionException e){

                }
                // we can display now images on the page
                displayImages(images);
                // shut down the executor service now
                executor.shutdown();

            }

        }


    .. _Future: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html
    .. _ExecutorService: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html
    .. _WebPage: /course/LEPL1402/Future/WebPage.java
    .. _Image: /course/LEPL1402/Future/Image.java
    .. _URL: /course/LEPL1402/Future/URL.java
    .. _HTML: /course/LEPL1402/Future/HTML.java
environment: pyjavacpp
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[Module 6] Future [easy]'
network_grading: false
order: 53
problems:
    student_constructor:
        header: 'Paste here the **body** of the ``constructor`` :'
        language: java
        type: code
        name: ''
        default: ''
    student_loadImage:
        type: code_single_line
        default: ''
        header: 'Paste here the **body** of ``loadImage`` :'
        name: ''
    student_loadImages:
        name: ''
        type: code
        language: java
        default: ''
        header: 'Paste here the **body** of ``loadImages`` :'
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
