accessible: true
author: Bastin J, Piron H
categories:
- module6
contact_url: ''
context: |-
    A Cyclic barrier in concurrent programming is a synchronization construct that helps you synchronize threads every once in a while. The idea is simple, after a thread finished executing a certain amount of operation, it waits until the barrier thread recover the result to restart. Note that the barrier recover this result when every thread is waiting, it thus recover all the results and then the threads can restart their computing before stopping at the next checkpoint.

    In this exercise we ask you to compute the highest sum in a set of array. Imagine that you have a large set of 2D-arrays stored as one 3D-array. We ask you to use a fixed amount of threads, and a small buffer. Each thread is going to compute the sum of the values in a 2D-array and store this sum in the shared buffer. Once every thread has finished computing the sum of his array, the barrier recovers the maximum. When you don't need to compute sums the threads stop and the barrier returns the final result (the value of the maximal sum).

    We give you the class MaxFinder_ that you must complete, read the code carefully before you start writing any line of code.

    You should also read the class CyclicBarrier_ in the java api.

    You can download the `IntelliJ Project`_.

    .. _`IntelliJ Project`: /course/LEPL1402/CyclicBarrier/LEPL1402_CyclicBarrier.zip

    .. _MaxFinder: /course/LEPL1402/CyclicBarrier/MaxFinder.java
    .. _CyclicBarrier: https://docs.oracle.com/javase/8/docs/api/index.html?java/util/concurrent/CyclicBarrier.html
environment: pyjavacpp
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[Module 6] Cyclic Barrier [hard]'
network_grading: false
order: 57
problems:
    studentWorker:
        header: Paste here the **body** of the worker inner-class
        language: java
        type: code
        default: ''
        name: Worker Implementation
    StudentMaxFinderConstructor:
        type: code
        default: ''
        header: Paste here the **body** of the MaxFinder constructor (only the part
            you implemented)
        name: MaxFinder Implementation
        language: java
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
