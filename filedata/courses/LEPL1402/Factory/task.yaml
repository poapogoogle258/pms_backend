accessible: true
author: Yakoub J, Rucquoy A
categories:
- module4
contact_url: ''
context: |-
    In this task, we will ask you to implement a labyrinth mini-game level builder using the factory design pattern.
    Each level consists in a set of Wall_, Key_, Floor_, Door_, all of them implementing the LevelComponent_ interface.
    Your goal is thus to implement the following two classes:

    You can download the `IntelliJ Project`_.

    .. _`IntelliJ Project`: /course/LEPL1402/Factory/LEPL1402_Factory.zip

    .. code-block:: java

        public class ElementFactory extends Factory {

            // YOUR CODE HERE

            public static ElementFactory getInstance() {
                // YOUR SINGLETON HERE
            }

        }


        public class Level extends AbstractLevel {

            public Level(String input) {
                // YOUR CODE HERE
            }

            /* Example of level building with this String : String s = "#-K\n-D-\n#-K\n"
             * Gives : LevelComponent[][] componentsObjects = {
             *                                        {new Wall(), new Floor(), new Key()},
             *                                        {new Floor(), new Door(), new Floor()},
             *                                        {new Wall(), new Floor(), new Key()}}
             */


            // YOUR CODE HERE
        }

    .. _Wall: /course/LEPL1402/Factory/Wall.java
    .. _Key: /course/LEPL1402/Factory/Key.java
    .. _Floor: /course/LEPL1402/Factory/Floor.java
    .. _Door: /course/LEPL1402/Factory/Door.java
    .. _LevelComponent: /course/LEPL1402/Factory/LevelComponent.java

    Note that these two classes extend the abstract classes Factory_ and AbstractLevel_.
    Do note that we add a small constraint to this exercise: your ElementFactory **must** be a singleton (i.e, it should not be possible to instantiate your factory with Java's ``new`` keyword).
    For your ``Level`` class, what we want you to do is, given a String, create a ``Level`` object whose ``components`` is a 2D array where each cell represent a ``LevelComponent`` and whose ``size`` is the total number of components in the level.
    Note that all sub-arrays in ``components`` will have the same size as we will only ask you to create "square" labyrinths.
    If a character does not correspond to one of the components, your code should throw an ``IllegalArgumentException``.

    .. _Factory: /course/LEPL1402/Factory/Factory.java
    .. _AbstractLevel: /course/LEPL1402/Factory/AbstractLevel.java
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[Module 4] Factory design pattern - Level generator'
network_grading: false
order: 38
problems:
    student_factory:
        header: 'Paste the **body** of your ``ElementFactory`` class here:'
        type: code
        language: java
        name: ''
        default: ''
    student_level:
        name: ''
        header: 'Paste the **body** of your ``Level`` class here:'
        default: ''
        language: java
        type: code
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
