accessible: true
author: Yakoub J, Rucquoy A
categories:
- module5
contact_url: ''
context: |-
    In order to understand why the Stream class could be useful for genericity, we give you this small exercise where you'll have to work on both casting and streams.

    Given the Student_ class, you are asked to write the StudentFunctions_ class (which implements the StudentStreamFunction_ interface):

    .. code-block:: java

       import java.util.Map;
       import java.util.function.Predicate;
       import java.util.stream.Stream;
       import java.util.Comparator;

       public interface StudentStreamFunction {

       // In order to test your code efficiently, input conditions take the
       // form of a Map<String, Predicate<?>> object structured as follows:
       //    Key   : String corresponding to one of the fields of Student objects
       //            ("firstName", "lastName", "section", "courses_results")
       //    Value : Predicate bound to the type of the field on which the condition applies
       //
       // For example:
       //    Key   : "firstName"
       //    Value : Predicate<String>


       // Returns a student that matches the given conditions
       // If there is none, returns null
       public Student findFirst(Stream<Student> studentsStream,
                                Map<String, Predicate<?>> conditions);

       // Returns an array of student(s) that match the given conditions
       public Student[] findAll(Stream<Student> studentsStream,
                                Map<String, Predicate<?>> conditions);

       // Returns true if there are at least n student(s) that match the given conditions
       public boolean exists(Stream<Student> studentsStream,
                             Map<String, Predicate<?>> conditions,
                             int n);

       // Returns an array of student(s) that match the given conditions,
       // ordered according to the given comparator
       public Student[] filterThenSort(Stream<Student> studentsStream,
                                       Map<String, Predicate<?>> conditions,
                                       Comparator<Student> comparator);

       }

    You can download the `IntelliJ Project`_ which contains a few tests to help you.

    .. _`IntelliJ Project`: /course/LEPL1402/Streams2/LEPL1402_Streams2.zip

    .. _StudentStreamFunction: /course/LEPL1402/Streams2/StudentStreamFunction.java
    .. _Student: /course/LEPL1402/Streams2/Student.java
    .. _StudentFunctions: /course/LEPL1402/Streams/StudentFunctions.java
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[Module 5] Dealing with Streams - 2'
network_grading: false
order: 52
problems:
    student_findFirst:
        language: java
        type: code
        name: ''
        default: ''
        header: 'Paste the **body** of your ``findFirst`` method here:'
    student_findAll:
        name: ''
        default: ''
        type: code
        header: 'Paste the **body** of your ``findAll`` method here:'
        language: java
    student_exists:
        language: java
        name: ''
        header: 'Paste the **body** of your ``exists`` method here:'
        type: code
        default: ''
    student_filterThenSort:
        language: java
        default: ''
        name: ''
        header: 'Paste the **body** of your ``filterThenSort`` method here:'
        type: code
    student_util:
        optional: 'on'
        type: code
        default: ''
        header: 'You can paste additional methods here if you need them:'
        language: java
        name: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
