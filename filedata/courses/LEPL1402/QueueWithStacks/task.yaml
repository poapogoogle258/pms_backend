accessible: true
author: Yakoub J, Rucquoy A
categories:
- module2
context: |-
    In this short exercise we will ask you to implement a FIFO queue using two stacks (provided as two Java ``Stack<E>``). We need you to provide 4 methods :
    ``enqueue``, ``dequeue``, ``peek``, ``empty``. You can use the ``Stack`` API_ , but you can't instantiate a new ``Stack``. Use ``s1`` and ``s2`` from the `MyQueue` class below.

    You can download the `IntelliJ Project`_ that contains few tests to help you.

    .. _`IntelliJ Project`: /course/LEPL1402/QueueWithStacks/LEPL1402_QueueWithStacks.zip

    .. _API : https://docs.oracle.com/javase/8/docs/api/java/util/Stack.html

    .. code-block:: java

      import java.util.Stack;
      import java.util.NoSuchElementException;

      public class MyQueue<E> {

          Stack<E> s1;
          Stack<E> s2;

          private E front;

          /*
           * Constructor
           */
          public MyQueue() {
              s1 = new Stack<>();
              s2 = new Stack<>();
              this.front = null;
          }

          /**
           * Add an element to the end of the list
           *
           * @param elem The element to add
           */
          public void enqueue(E elem) {
              // TODO
          }

          /**
           * Remove the first element from the queue
           *
           * @return The oldest element in the queue
           * @throws NoSuchElementException if the queue is empty
           */
          public E dequeue() {
              // TODO
              return null;
          }

          /**
           * Peek at the first element of the queue
           *
           * @return The first element of the queue
           * @throws NoSuchElementException if the queue is empty
           */
          public E peek() {
              // TODO
              return null;
          }

          /**
           * @return true if the queue is empty
           */
          public boolean empty() {
              // TODO
              return false;
          }

      }

environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[Module 2] Queue with two stacks'
network_grading: false
order: 27
problems:
    enqueue:
        type: code
        header: 'Paste here the **body** of your ``enqueue`` method:'
        default: ''
        name: ''
        language: java
    dequeue:
        name: ''
        language: java
        type: code
        header: 'Paste here the **body** of your ``dequeue`` method:'
        default: ''
    peek:
        default: ''
        language: java
        header: 'Paste here the **body** of your ``peek`` method:'
        name: ''
        type: code
    empty:
        default: ''
        header: 'Paste here the **body** of your ``empty`` method:'
        language: java
        type: code
        name: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
