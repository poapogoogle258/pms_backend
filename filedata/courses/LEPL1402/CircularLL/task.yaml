accessible: true
author: Yakoub J, Rucquoy A
categories:
- module2
context: |-
    In this task, you'll implement some function of a Circular linked list.
    A circular linked list is a list where the last element points to the first element (hence producing a circle). An example is shown on the figure below

    .. figure:: /course/LEPL1402/CircularLL/CircularLinkedList.png
       :scale: 100 %
       :alt: alternate text
       :align: center
       :figclass: align-center


    We ask you to code the `enqueue` function that add an element to the end of the list as well as the `remove` function that remove an element at the given index.
    Read carefully the specifications of the function to know their exact behaviour!

    .. code-block:: java

        class ListNode<Item> {

            private Item item;
            private ListNode<Item> next;

            public ListNode(Item item){
                this.item = item;
                this.next = null;
            }

            public ListNode(Item item, ListNode<Item> next) {
                this.item = item;
                this.next = next;
            }

            /**
             * Return the item of the node
             *
             * @return The item contained in the node
             */
            public Item getItem() {
                return item;
            }

            /**
             * Get the next node in the list
             *
             * @return the next node in the list
             */
            public ListNode<Item> getNext() {
                return this.next;
            }

            /**
             * Set the followers of this node in the list
             *
             * @param next The node to put after this one
             */
            public void setNext(ListNode<Item> next) {
                this.next = next;
            }
        }

        public class CircularLinkedList<Item> {

            private int size;
            private ListNode<Item> first;
            private ListNode<Item> last;

            public CircularLinkedList() {
                first = null;
                last = null;
                size = 0;
            }

            /**
             * Add an element to the list
             *
             * @param item The element to add at the end of the list
             */
            public void enqueue(Item item) {
                // TODO
            }

            /**
             * Remove an element of the list
             *
             * @param index The index of the element to remove
             * @throws IndexOutOfBoundsException if the index is
             *         less than 0 or greater or equal to the size
             *         of the list
             */
            public Item remove(int index) {
                // TODO
            }

            /**
             * The size of the list
             *
             * @return The size of the list
             */
            public int size() {
                return size;
            }

            /**
             * Is the list empty
             *
             * @return true if there is no element in the list
             *         and false otherwise
             */
            public boolean isEmpty() {
                return size == 0;
            }

            /**
             * Get the first element of the list
             *
             * @return The first ListNode in the list
             */
            public ListNode<Item> getFirst() {
                return this.first;
            }

            /**
             * Get the last element of the list
             *
             * @return The last ListNode in the list
             */
            public ListNode<Item> getLast() {
                return this.last;
            }
        }

environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[Module 2] Circular Linked list'
network_grading: false
order: 26
problems:
    student_enqueue:
        header: 'Paste here the BODY of your ``enqueue`` method:'
        name: ''
        language: java
        type: code
        default: ''
    student_remove:
        language: java
        name: ''
        header: 'Paste here the BODY of your ``remove`` method:'
        type: code
        default: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
