accessible: true
author: Yakoub J, Rucquoy A
categories:
- module4
contact_url: ''
context: |
    In this task, you should provide a test suite for coverage check of the following class:

    .. code-block:: java

        public class BigDecimal {
            /*
             * parse exponent
             */
            public static long parseExp(char[] in, int offset, int len){
                long exp = 0;
                offset++;
                char c = in[offset];
                len--;
                boolean negexp = (c == '-');
                // optional sign
                if (negexp || c == '+') {
                    offset++;
                    c = in[offset];
                    len--;
                }
                if (len <= 0) // no exponent digits
                    throw new NumberFormatException();
                // skip leading zeros in the exponent
                while (len > 10 && (c=='0' || (Character.digit(c, 10) == 0))) {
                    offset++;
                    c = in[offset];
                    len--;
                }
                if (len > 10) // too many nonzero exponent digits
                    throw new NumberFormatException();
                // c now holds first digit of exponent
                for (;; len--) {
                    int v;
                    if (c >= '0' && c <= '9') {
                        v = c - '0';
                    } else {
                        v = Character.digit(c, 10);
                        if (v < 0) // not a digit
                            throw new NumberFormatException();
                    }
                    exp = exp * 10 + v;
                    if (len == 1)
                        break; // that was final character
                    offset++;
                    c = in[offset];
                }
                if (negexp) // apply sign
                    exp = -exp;
                return exp;
            }
        }

    In order to succeed at this task, you must cover all the different execution cases.
    To grade your tests, we use the tool ``Jacoco``, which checks whether you navigate through the entire given code.
    First try to understand what this code does before writing tests that will navigate through each condition, each loop, etc.


    Take a look at this link_ to understand the feedback you'll be given.


    .. _link: https://www.eclemma.org/jacoco/trunk/doc/counters.html

    Use the following template to start your test suite:

    .. code-block:: java

        import org.junit.Test;
        import static org.junit.Assert.*;

        public class TestSuite {

            @Test
            public void test() {
                 // parameters for parseExp
                 char[] in = new char[]{/*Some chars here*/};
                 // you can also use .toCharArray from String class for this:
                 // char[] in = myString.toCharArray();
                 int offset = /*Some value HERE*/;
                 int len = /*Some value HERE*/;
                 // run the program with the given situation
                 BigDecimal.parseExp(in, offset, len);
            }

            // Add more tests here.

        }
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[Module 4] Coverage Testing'
network_grading: false
order: 37
problems:
    student_code:
        type: code
        header: 'Insert the **BODY** of your test suite here:'
        language: java
        name: ''
        default: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
