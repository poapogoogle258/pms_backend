accessible: true
author: Yakoub J, Rucquoy A
categories:
- module5
contact_url: ''
context: |-
    Given the Student_ class, you are asked to write the StudentFunctions_ class (which implements the StudentStreamFunction_ interface):

    .. code-block:: java

       import java.util.stream.Stream;

       public interface StudentStreamFunction {

          // Finds the N°2 and N°3 top students for the course name given as parameter
          public Stream<Student> findSecondAndThirdTopStudentForGivenCourse(Stream<Student> studentStream,
                                                                            String name);

          // Computes, for each student in the given section, their average grade result,
          // in the form of an array of arrays structured as follows:
          // [ ["Student FirstName1 LastName1", 7.5], ["Student FirstName2 LastName2", 9.5] ]
          public Object[] computeAverageForStudentInSection(Stream<Student> studentStream,
                                                            int section);

          // Gives the number of students that passed all courses (all grades > 10.0)
          public int getNumberOfSuccessfulStudents(Stream<Student> studentStream);

          // Finds the last student in lexicographic order
          // (First compare students on their lastNames and then on their firstNames)
          public Student findLastInLexicographicOrder(Stream<Student> studentStream);

          // Gives the total sum of all grades obtained by all students
          public double getFullSum(Stream<Student> studentStream);

       }


    You can download the `IntelliJ Project`_, which contains a few tests to help you.

    .. _`IntelliJ Project`: /course/LEPL1402/Streams/LEPL1402_Streams.zip

    .. _StudentStreamFunction: /course/LEPL1402/Streams/StudentStreamFunction.java
    .. _Student: /course/LEPL1402/Streams/Student.java
    .. _StudentFunctions: /course/LEPL1402/Streams/StudentFunctions.java
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[Module 5] Dealing with Streams'
network_grading: false
order: 50
problems:
    student_find_second_and_third_top_student_for_given_course:
        name: ''
        default: ''
        language: java
        type: code
        header: 'Paste the **body** of your ``findSecondAndThirdTopStudentForGivenCourse`` method here:'
    student_compute_average_for_student_in_section:
        type: code
        header: 'Paste the **body** of your ``computeAverageForStudentInSection`` method here:'
        default: ''
        name: ''
        language: java
    student_get_number_of_successful_students:
        name: ''
        default: ''
        language: java
        type: code
        header: 'Paste the **body** of your ``getNumberOfSuccessfulStudents`` method here:'
    student_find_last_in_lexicographic_order:
        default: ''
        type: code
        header: 'Paste the **body** of your ``findLastInLexicographicOrder`` method here:'
        language: java
        name: ''
    student_get_full_sum:
        type: code
        name: ''
        default: ''
        header: 'Paste the **body** of your ``getFullSum`` method here:'
        language: java
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
