accessible: true
author: Bastin J, Piron H, Maris L
categories:
- module5
contact_url: ''
context: |-
    `Functional programming`_ is an increasingly important programming paradigm.
    In this paradigm, data structures are immutable_.
    You are asked to implement an immutable list called FList that can be used in functionnal programming.

    You should first make sure that you understood the code that is given to you and what is asked from you before trying to work out
    an implementation. Don't be intimidated by the size of size of the class we're giving you: none of its methods should require more
    than 5 lines of code from you. Make sure you code recursively and not iteratively (which would be much harder)!

    You can download the `IntelliJ Project`_, which contains a few tests to help you.

    .. _`IntelliJ Project`: /course/LEPL1402/FList/LEPL1402_FList.zip

    You can download the FList class you have to implement `here </course/LEPL1402/FList/FList.java>`_.

    Since you know how your code should work, we **strongly** recommend you to test it on your computer before trying to submit.
    The iterator is the most critical part of this task, so if it doesn't work, most of the tests will not work.

    .. _`Functional programming`: https://en.wikipedia.org/wiki/Functional_programming
    .. _immutable: https://en.wikipedia.org/wiki/Purely_functional_data_structure
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[Module 5] Functional list implementation'
network_grading: true
order: 47
problems:
    student_answer:
        header: 'Paste the **body** of your ``FList<A>`` **class** here:'
        language: java
        name: ''
        default: |4
                /**
                 * Returns an empty FList
                 */
                public static <A> FList<A> nil() {
                    return (Nil<A>) Nil.INSTANCE;
                }

                /**
                 * Creates a new list with a prepended to this list
                 */
                public final FList<A> cons(final A a) {
                    return new Cons(a, this);
                }

                /**
                 * @return the number of elements in the list
                 */
                public abstract int length();

                /**
                 * @return true if the list is empty, false otherwise
                 */
                public abstract boolean isEmpty();

                /**
                 * @return the head of the list.
                 * Throws NoSuchElementException if the list is empty
                 */
                public abstract A head();

                /**
                 * @return the tail of the list (i.e. the sublist without the first element of this list)
                 * Throws NoSuchElementException if the list is empty
                 */
                public abstract FList<A> tail();

                /**
                 * Returns a new list with the output of the function f applied to each element of this list
                 */
                public abstract <B> FList<B> map(Function<A,B> f);

                /**
                 * Creates a new list with only the element that fullfill the predicate f (i.e. f(elem) == true).
                 */
                public abstract FList<A> filter(Predicate<A> f);


                public Iterator<A> iterator() {
                    return new Iterator<A>() {
                        // Do whatever you want here

                        public boolean hasNext() {
                            // TODO
                        }

                        public A next() {
                            // TODO
                        }

                        public void remove() {
                            throw new UnsupportedOperationException();
                        }
                    };
                }


                private static final class Nil<A> extends FList<A> {
                    public static final Nil<Object> INSTANCE = new Nil();
                    // TODO
                }

                private static final class Cons<A> extends FList<A> {
                    // TODO
                }
        type: code
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
