#!/bin/python3

# Script d'interface entre INGInious et des tests unitaires écrits à l'aide de CUnit
# Auteurs : Mathieu Xhonneux, Anthony Gégo
# Licence : GPLv3

import subprocess, shlex, re, os, json
from inginious import feedback, rst, input

# Switch working directory to student/
os.chdir("student")

# Fetch and save the student code into a file for compilation
input.parse_template("template.c.tpl", "student_code.c")

# Compilation
p = subprocess.Popen(shlex.split("make"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
make_output = p.communicate()[0].decode('utf-8')
# If compilation failed, exit with "failed" result
if p.returncode:
    feedback.set_global_result("failed")
    feedback.set_global_feedback("La compilation de votre code a échoué. Voici le message de sortie de la commande ``make`` :")
    feedback.set_global_feedback(rst.get_codeblock('', make_output), True)
    exit(0)

# Remove source files
subprocess.run("rm -rf *.c *.tpl *.h *.o", shell=True)

# Run the code in a parallel container
p = subprocess.Popen(shlex.split("run_student make run"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
run_output = p.communicate()[0].decode('utf-8')
# If run failed, exit with "failed" result
if p.returncode:
    feedback.set_global_result("failed")
    if p.returncode == -8:
        feedback.set_global_feedback("Votre code a produit une erreur lors de l\'exécution des tests. Le signal SIGFPE a été envoyé : exception de virgule flottante (floating point exception).")
    elif p.returncode == -11:
        feedback.set_global_feedback("Votre code a produit une erreur lors de l\'exécution des tests. Le signal SIGSEGV a été envoyé : segmentation fault.")
    else:
        feedback.set_global_feedback("Votre code a produit une erreur lors de l\'exécution des tests.")
    exit(0)

# Fetch test results
with open("tests.json") as fp:
    tests = json.load(fp)

tests_failed = [item for item in tests["itest_results"] if not item[1]]
tests_success = [item for item in tests["itest_results"] if item[1]]

# Set feedback
feedback.set_global_result("success" if len(tests_failed) == 0 else "failed")
for tests_array in zip([tests_success, tests_failed], ["Succedded tests", "Failed tests"]):
    feedback.set_global_feedback("\n\n|\n\n**" + tests_array[1] + ":**\n\n" if len(tests_array[0]) else "", True)
    for test in tests_array[0]:
        feedback.set_global_feedback("* " + test[0] + " : " + test[2] + "\n", True)

feedback.set_global_feedback("\n\n|\n\n" + tests["itest_comment"], True)

# Compute score
nb_tests = len(tests["itest_results"])
grade = 100*float(nb_tests - len(tests_failed))/nb_tests
feedback.set_grade(grade)
