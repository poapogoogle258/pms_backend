accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: "We ask you to write two simple functions that are  needed to implement a\
  \ simple linked list.\n\n\n.. code-block:: c\n\n    /**\n    * Structure node\n\
  \    *\n    * @next: pointer to the next node in the list, NULL if last node_t\n\
  \    * @value: value stored in the node\n    */\n    typedef struct node {\n   \
  \   struct node *next;\n      int value;\n    } node_t;\n\n    /**\n    * Structure\
  \ list\n    *\n    * @first: first node of the list, NULL if list is empty\n   \
  \ * @size: number of nodes in the list\n    */\n    typedef struct list {\n    \
  \  struct node *first;\n      int size;\n    } list_t;\n\n\n**In your functions,\
  \ you cannot use the function** `calloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_\n\
  \n"
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits: {memory: '100', output: '2', time: '30'}
name: '[S3] Simple linked list '
network_grading: false
order: 36
problems:
  add_node: {default: '', header: ".. code-block:: c\n\n    /*\n    * Add a node at\
      \ the head of the list @list and increment the number of nodes in the list (member\
      \ `size`)\n    *\n    * @l: linked list\n    * @value: value to add to the list\n\
      \    *\n    * @return: 0 if success, 1 otherwise\n    */\n    int add_node(list_t\
      \ *list, int value);\n", language: c, name: Adding a node, type: code}
  init_node: {default: '', header: ".. code-block:: c\n\n    /*\n    * Create a new\
      \ node containing the value @value.\n    *\n    * @value: value stored in the\
      \ node\n    * @return: returns the pointer to the newly created node, or NULL\
      \ if an error occured.\n    */\n    node_t *init_node(int value) {\n", language: c,
    name: Node initialisation, type: code}
stored_submissions: 0
submission_limit: {amount: -1, period: -1}
tags:
  '0': {description: Your code exceeds the maximum allowed time., id: timeout, name: Timeout,
    type: 1, visible: true}
  '1': {description: '', id: sigsegv, name: Segmentation Fault, type: 1, visible: true}
  '10': {description: A new node is not allocated with malloc()., id: not_allocated,
    name: Not allocated, type: 1, visible: false}
  '11': {description: Your function returns an error in normal case., id: error_normal_case,
    name: Error normal case, type: 1, visible: false}
  '12': {description: The list has not the expected size., id: wrong_list_size, name: Wrong
      list size, type: 1, visible: false}
  '13': {description: Wrong return value when wrong args., id: wrong_args_handling,
    name: Bad Args handling, type: 1, visible: false}
  '14': {description: The linked list does not correspond to the waited one., id: not_expected_list,
    name: Incorrect list, type: 1, visible: false}
  '15': {description: The list was modified while the malloc() fails., id: modif_list_malloc_fail,
    name: Modif list malloc fail, type: 1, visible: false}
  '16': {description: You code does not compile., id: not_compile, name: Not compile,
    type: 1, visible: true}
  '17': {description: '', id: memory, name: Memory Exceeded, type: 1, visible: true}
  '18': {description: '', id: sigfpe, name: Floating Point Exception, type: 1, visible: true}
  '19': {description: '', id: '', name: S3, type: 2, visible: true}
  '2': {description: Your code produced a double free., id: double_free, name: Double
      free, type: 1, visible: true}
  '20': {description: Task dealing with data structures and linked list, id: '', name: Data
      structures, type: 2, visible: true}
  '21': {description: Usage of malloc(), id: '', name: Malloc, type: 2, visible: true}
  '22': {description: Your code does not compile with cppcheck, id: cppcheck, name: Cppcheck
      fails, type: 1, visible: true}
  '3': {description: You use some banned functions., id: banned_funcs, name: Banned
      functions, type: 1, visible: true}
  '4': {description: The malloc() functions was not called exactly once., id: not_malloc_once,
    name: Not malloc once, type: 1, visible: false}
  '5': {description: SCRIPT_ERROR - This tag should not appear. If it appears this
      is probably an error in the test suite of this task., id: SCRIPT_ERROR, name: SCRIPT
      ERROR, type: 1, visible: false}
  '6': {description: The allocated memory doesn't have the correct size., id: malloc_fail_memory_size,
    name: Wrong malloc memory size, type: 1, visible: false}
  '7': {description: The value of the node is not the expected one., id: bad_node_value,
    name: Bad node value, type: 1, visible: false}
  '8': {description: The 'next' pointer is not correctly initialised, id: bad_next_pointer,
    name: Bad next pointer, type: 1, visible: false}
  '9': {description: Wrong return value when malloc call fails., id: malloc_fail_handling,
    name: Malloc fail handling, type: 1, visible: false}
weight: 1.0
