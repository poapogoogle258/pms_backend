accessible: true
author: Arthur van Stratum
context: 'In this exercise, we will work with operations on bits. When we speak about
  the position of a bit, index 0 corresponds to lowest order bit, 1 to the second-lowest
  order bit, ...


  In C source code, you can write a number in binary (base 2) by prefixing it via
  0b., e.g. ``0b11010`` = 26.


  This exercise will introduce some non-standard data types which guarantee that the
  variable has a fixed number of bits. Indeed, on some machines, a *int* could use
  2, 4 or 8 bytes. Hence, if we want to perform bitwise operations, we have to know
  first on how many bits we are working.


  For this, C introduces a new class of variable types :


  - *int8_t* (signed integer of 8 bits)

  - *uint8_t* (unsigned integer of 8 bits)

  - *uint16_t* (unsigned integer of 16 bits)


  You can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These types are
  defined in <stdint.h>'
environment: cpp
evaluate: best
groups: false
limits: {memory: '100', output: '2', time: '30'}
name: '[S2] Bitwise operation: extract low order bits'
network_grading: false
order: 20
problems:
  q1: {header: "Write the body of a function *get_4_rightmost_bits* that returns the\
      \ 4 low order bits of *x*.\n\nFor instance, if *x=0b...11011001*, the function\
      \ should return a *uint8_t* containing ``0b00001001``. If *x=0b...11011101*,\
      \ your function should return ``0b00001101``.\n\n.. code-block:: c\n\n    #include\
      \ <stdint.h>\n    uint8_t get_4_rightmost_bits(uint32_t x) {\n", language: c,
    name: '', type: code}
stored_submissions: 0
submission_limit: {amount: -1, period: -1}
tags:
  '0': {description: Your code exceeds the maximum allowed time., id: timeout, name: Timeout,
    type: 1, visible: true}
  '1': {description: '', id: sigsegv, name: Segmentation Fault, type: 1, visible: true}
  '2': {description: You code does not compile., id: not_compile, name: Not compile,
    type: 1, visible: true}
  '3': {description: '', id: memory, name: Memory Exceeded, type: 1, visible: true}
  '4': {description: '', id: sigfpe, name: Floating Point Exception, type: 1, visible: true}
  '5': {description: Your code produced a double free., id: double_free, name: Double
      free, type: 1, visible: true}
  '6': {description: You use some banned functions., id: banned_funcs, name: Banned
      functions, type: 1, visible: true}
  '7': {description: '', id: '', name: S2, type: 2, visible: true}
  '8': {description: Your code does not compile with cppcheck, id: cppcheck, name: Cppcheck
      fails, type: 1, visible: true}
weight: 1.0
