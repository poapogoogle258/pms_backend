accessible: false
author: Pablo Gonzalez Alvarez
context: |-
    *Estimated time: 15 minutes*

    This week, we will see how to automate the testing process.
    You have the following project folder structure:

    .. code-block::

        src/
            calc.c
            calc.h
            operations.c
            operations.h
        test/
            calc_test.c
            operations_test.c
        Makefile

    The ``Makefile`` is partially done, but somehow the target ``test`` for building the tests was lost.

    .. code-block::

        CC = gcc
        # See gcc/clang manual to understand all flags
        CFLAGS += -std=c99 # Define which version of the C standard to use
        CFLAGS += -Wall # Enable the 'all' set of warnings
        CFLAGS += -Werror # Treat all warnings as error
        CFLAGS += -Wshadow # Warn when shadowing variables
        CFLAGS += -Wextra # Enable additional warnings
        CFLAGS += -O2 -D_FORTIFY_SOURCE=2 # Add canary code, i.e. detect buffer overflows
        CFLAGS += -fstack-protector-all # Add canary code to detect stack smashing

        # We have no libraries to link against except libc, but we want to keep
        # the symbols for debugging
        LDFLAGS= -rdynamic -lcunit

        ## all        : Build calc (by default)
        # Default target
        all: calc

        ## debug        : Build calc in debug mode
        # If we run `make debug` instead, keep the debug symbols for gdb
        # and define the DEBUG macro.
        debug: CFLAGS += -g -DDEBUG -Wno-unused-parameter -fno-omit-frame-pointer
        debug: clean calc

        ## calc        : Build calc
        # We use an implicit rule: look for the files {calc,operations}.{c,h},
        # compile them and link the resulting *.o into an executable named calc
        calc: calc.o operations.o
            $(CC) $(CFLAGS)  -o calc {calc,operations}.o

        # We use an implicit rule: look for the files calc.{c,h},
        # compile them w/out linking
        calc.o: src/calc.c src/calc.h
            $(CC) $(CFLAGS) -c src/calc.{c,h}
        # We use an implicit rule: look for the files operations.{c,h},
        # compile them w/out linking
        operations.o: src/operations.c src/operations.h
            $(CC) $(CFLAGS) -c src/operations.{c,h}

        # YOUR CODE HERE #

        # Declare clean, mrproper and help as a phony targets
        .PHONY: clean mrproper help

        ## clean        : Remove auto-generated files from build
        clean:
            @rm -f *.o

        ## clean-debug        : Removve auto-generated files from debug mode build
        clean-debug:
            @rm -f src/*.gch
        ## mrproper    : Remove both auto-generated & built files
        mrproper: clean clean-debug
            @rm -f calc

        ## help        : Show different make options
        help: Makefile
            @sed -n 's/^##//p' $<

    To try locally, you can download the project folder `_here <>`
environment: cpp
evaluate: best
groups: false
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[S4] make tests'
network_grading: false
order: 46
problems:
    make_test:
        type: code
        language: Makefile
        name: Make test
        header: |
            You have the above given ``Makefile``. You want to add a target to build the test that use the library **CUnit**. You will call this target ``test``.
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        type: 0
        id: make
        name: make & Makefile
        description: Tasks related to the make task runner for targets described in
            Makefile.
        visible: true
    '1':
        type: 2
        visible: true
        name: S3
        description: ''
        id: ''
weight: 1.0
