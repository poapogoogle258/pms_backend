accessible: true
author: Arthur van Stratum
context: 'Palindrome are strings of text which read the same backward as forward,
  i.e. : "racecar", "a man a plan a canal panama" or "kayak".'
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits: {memory: '100', output: '2', time: '30'}
name: '[S2] Palindrome'
network_grading: false
order: 17
problems:
  q1: {default: '', header: "Write the body of the function *pal* which tells if the\
      \ given string is a palindrome or not. **Ignore spaces:** for example, \"kay\
      \ a k\" should be considered a palindrome. An empty string is considered a palindrome.\
      \ You can use all the functions that are defined in  *string.h*\n\n.. code-block::\
      \ c\n\n    #include <string.h>\n    /*\n    * @return: returns true (1) if str\
      \ is a palindrome, -1 if str is NULL, otherwise false (0).\n    */\n    int\
      \ pal(char *str) {", language: c, name: '', type: code}
stored_submissions: 0
submission_limit: {amount: -1, period: -1}
tags:
  '0': {description: Your code exceeds the maximum allowed time., id: timeout, name: Timeout,
    type: 1, visible: true}
  '1': {description: '', id: sigsegv, name: Segmentation Fault, type: 1, visible: true}
  '2': {description: You code does not compile., id: not_compile, name: Not compile,
    type: 1, visible: true}
  '3': {description: '', id: memory, name: Memory Exceeded, type: 1, visible: true}
  '4': {description: '', id: sigfpe, name: Floating Point Exception, type: 1, visible: true}
  '5': {description: Your code produced a double free., id: double_free, name: Double
      free, type: 1, visible: true}
  '6': {description: You use some banned functions., id: banned_funcs, name: Banned
      functions, type: 1, visible: true}
  '7': {description: '', id: '', name: S2, type: 2, visible: true}
  '8': {description: Your code does not compile with cppcheck, id: cppcheck, name: Cppcheck
      fails, type: 1, visible: true}
weight: 1.0
