accessible: false
author: Pablo Gonzalez Alvarez
context: |-
    *Estimated time: 20 minutes*

    First, read `sections 2.4 to 2.7. in the GNU make manual <https://www.gnu.org/software/make/manual/make.html#Variables-Simplify>`_. It will only take you 10 minutes (included in the above given estimated time) and will help you understand how to ``make`` more magic happen.

    As you have just read, one very useful use of Makefiles is to use variables. You can use a variable to define the C compiler you will use and the flags you want it to use.

    For instance, let us consider the following excerpt of a Makefile:

    .. code-block:: console

        # See gcc/clang manual to understand all flags
        CFLAGS += -std=c99 # Define which version of the C standard to use
        CFLAGS += -Wall # Enable the 'all' set of warnings
        CFLAGS += -Werror # Treat all warnings as error
        CFLAGS += -Wshadow # Warn when shadowing variables
        CFLAGS += -Wextra # Enable additional warnings
        CFLAGS += -O2 -D_FORTIFY_SOURCE=2 # Add canary code, i.e. detect buffer overflows
        CFLAGS += -fstack-protector-all # Add canary code to detect stack smashing

        # Object files
        OBJ = # TODO

        ## all        : Build calculator (by default)
        # Default target
        all: calc

        ## calc        : Build calculator
        calc: # TODO

        calc.o: # TODO

        operations.o: # TODO

        .PHONY: clean mrproper help

        ## clean        : Remove auto-generated files
        clean:
            @rm -f src/*.o

        ## mrproper    : Remove both auto-generated & built files
        mrproper: clean
            @rm -f calc

        ## help        : Show different make options
        help: Makefile
            @sed -n 's/^##//p' $<





    In this file we used 3 variables: ``CC`` to define the C Compiler; ``CFLAGS`` to define the C Compiler flags; ``OBJ`` to define the object files. This is a common use of variables to both simplify the Makefile and easily change the settings of the compiler.

    Notice the use of two ``.PHONY`` targets: ``clean`` which will remove auto-generated files, e.g. object files; ``mrproper`` which will remove both auto-generated & built files, e.g. executable files; ``help`` which will search for lines starting with ``##`` and print them on ``stdout`` without the ``##``. Try it out by tipping ``make help``.
environment: cpp
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[S4] make more basics'
network_grading: false
order: 43
problems:
    m1:
        name: Calculator variable
        answer: OBJ = calc.o operations.o
        header: |-
            Remember the  `calculator <https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make_calc>`_ you had to make last week?

            When you typed ``ls`` you had the following folder structure:

            .. code-block:: console

                calc.c    calc.h    Makefile    operations.c    operations.h

            Write a variable called ``OBJ`` to simplify the compilation process in the Makefile.
        type: match
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        visible: true
        name: make & Makefile
        description: Tasks related to the make task runner for targets described in
            Makefile.
        id: make
        type: 0
    '1':
        description: ''
        name: S3
        type: 2
        visible: true
        id: ''
weight: 1.0
