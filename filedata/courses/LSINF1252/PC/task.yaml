accessible: true
author: Olivier Bonaventure
context: |-
    Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo

    Les pages de manuel sont accessibles depuis les URLs suivants :
        - http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)
        - http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)
        - http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)

    **Attention:** veuillez utiliser la version **HTML** du syllabus


    .. image:: PC/buffer.png
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '10'
name: '[Septembre 2016A] Producteurs/Consommateurs'
network_grading: false
order: 72
problems:
    mp:
        header: |-
            Une librairie supportant un buffer partagé utilisé pour résoudre
            le problème des "Producteurs/Consommateurs" est implémentée comme
            suit.

            .. code:: c

                typedef struct {
                    int *buf;          /* Buffer partagé */
                    int n;             /* Nombre de slots dans le buffer */
                    int front;         /* buf[(front+1)%n] est le premier élément */
                    int rear;          /* buf[rear%n] est le dernier */
                    sem_t mutex;       /* Protège l'accès au buffer */
                    sem_t slots;       /* Nombre de places libres */
                    sem_t items;       /* Nombre d'items dans le buffer */
                } sbuf_t;

                /*
                 * @pre sp!=NULL, n>0
                 * @post a construit un buffer partagé contenant n slots
                 */
                void sbuf_init(sbuf_t *sp, int n)
                {
                    sp->buf = calloc(n, sizeof(int));
                    sp->n = n;                       /* Buffer content les entiers */
                    sp->front = sp->rear = 0;        /* Buffer vide si front == rear */
                    sem_init(&sp->mutex, 0, 1);      /* Exclusion mutuelle */
                    sem_init(&sp->slots, 0, n);      /* Au début, n slots vides */
                    sem_init(&sp->items, 0, 0);      /* Au début, rien à consommer */
                }

                /*
                 * @pre sp!=NULL
                 * @post libère le buffer
                 */
                void sbuf_clean(sbuf_t *sp)
                {
                    free(sp->buf);
                }

                /* @pre sp!=NULL
                 * @post ajoute item à la fin du buffer partagé. Ce buffer est géré
                 *       comme une queue FIFO
                 */
                void sbuf_insert(sbuf_t *sp, int item)
                {
                  // à compléter
        name: Fonction insert
        type: code
        language: c
    mp_remove:
        header: |-
            Implémentez ici la fonction suivante

            .. code:: c

                /* @pre sbuf!=NULL
                 * @post retire le dernier item du buffer partagé
                 */
                int sbuf_remove(sbuf_t *sp)
                {
        language: c
        name: Fonction remove
        type: code
    montest:
        type: code
        language: c
        name: Fonction de test optionnelle
        optional: 'on'
        header: |-
            Insérez votre code de test optionnel ci-dessous. Vous pouvez utiliser ``printf`` dans cette fonction pour débugger votre programme, mais vous *devez* effacer ce code de debug pour finaliser votre soumission car toute erreur le code de cette fonction peut empêcher la bonne évaluation de votre travail.

            .. code:: c

               void montest(void) {
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
