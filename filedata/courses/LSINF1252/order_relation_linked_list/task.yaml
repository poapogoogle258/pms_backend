accessible: true
author: Maxime Mawait & Nicolas Rybowski
context: Given the provided implementation of a linked list, you need to implement
  the ``insert`` function based on a specific order relation. The goal is to implement
  an ordered list similar to a `LinkedList` with a `Comparator` in Java.
environment: cpp
evaluate: best
groups: false
input_random: '0'
limits: {memory: '100', output: '2', time: '30'}
name: '[S4] Ordered  linked list'
network_grading: false
order: 51
problems:
  insert: {default: '', header: "Assuming following linked list structure :\n\n..\
      \ code-block:: c\n\n    typedef struct node{\n        char val;\n        struct\
      \ node *next;\n    } node_t;\n\nWrite the body of the function ``insert``\n\n\
      .. code-block:: c\n\n    /*\n    * @value: value to be inserted. If the value\
      \ is already in the list, no element is added and the list is not modified\n\
      \    * @fun: comparison function which defines the order relationship of the\
      \ list\n    * @head: first node of the list, head != NULL\n    * @return: 0\
      \ if success, -1 otherwise\n    */\n    int insert(node_t **head, char val,\
      \ int (*cmp)(char,char)) {\n", language: c, name: Insert, type: code}
  order_relation: {default: '', header: "For this subproblem, you need to implement\
      \ the comparison function which defines the order relationship of the list.\n\
      \nWrite the body of the function *compare*.\n\n.. code-block:: c\n\n    /*\n\
      \    * @return: 0 if equals, negative number if @b is greater,\n    * and positive\
      \ number otherwise\n    */\n    int compare(char a, char b) {", language: c,
    name: Order relation, type: code}
stored_submissions: 0
submission_limit: {amount: -1, period: -1}
tags:
  '0': {description: Your code exceeds the maximum allowed time., id: timeout, name: Timeout,
    type: 1, visible: true}
  '1': {description: '', id: sigsegv, name: Segmentation Fault, type: 1, visible: true}
  '10': {description: Your code does not compile with cppcheck, id: cppcheck, name: Cppcheck
      fails, type: 1, visible: true}
  '2': {description: You code does not compile., id: not_compile, name: Not compile,
    type: 1, visible: true}
  '3': {description: '', id: memory, name: Memory Exceeded, type: 1, visible: true}
  '4': {description: '', id: sigfpe, name: Floating Point Exception, type: 1, visible: true}
  '5': {description: Your code produced a double free., id: double_free, name: Double
      free, type: 1, visible: true}
  '6': {description: You use some banned functions., id: banned_funcs, name: Banned
      functions, type: 1, visible: true}
  '7': {description: Task dealing with data structures and linked list, id: '', name: Data
      structures, type: 2, visible: true}
  '8': {description: Task about pointers and their use, id: '', name: Pointer, type: 2,
    visible: true}
  '9': {description: '', id: '', name: S4, type: 2, visible: true}
weight: 1.0
